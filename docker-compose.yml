services:
  api:
    build:
      context: ./api
      dockerfile: ../Dockerfile
    container_name: d-influencers-api
    working_dir: /var/www/html
    volumes:
      - ./api:/var/www/html
    networks:
      - app-network
    command: composer install && php artisan serve --host=0.0.0.0 --port=8000
    depends_on:
      - db

  app:
    image: node:20
    container_name: d-influencers-app
    working_dir: /app
    volumes:
      - ./app:/app
      - /app/node_modules

    command: sh -c "cd /app && npm install && npm run build"
    networks:
      - app-network

  nginx:
    image: nginx:1.25.2
    container_name: d-influencers-nginx
    restart: always
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - ./app/dist:/usr/share/nginx/html
      - ./api:/var/www/html
    ports:
      - "80:80"
      - "443:443"
    networks:
      - app-network
    depends_on:
      - api
      - app

  db:
    image: mysql:8.1.0
    container_name: d-influencers-db
    environment:
      MYSQL_ROOT_PASSWORD: "root@root@D-influencers"
      MYSQL_DATABASE: d_influencers_db
      MYSQL_USER: d_influencers
      MYSQL_PASSWORD: d-influencers@D-influencers
    ports:
      - "3306:3306"
    volumes:
      - db-data:/var/lib/mysql
    networks:
      - app-network

volumes:
  db-data:

networks:
  app-network:
    driver: bridge